//import net.serenitybdd.builds.ProjectVersionCounter
/**
 * To build a release version with the same version number as the serenity core dependency:
 *   gradle build -PcoreRelease
 * To build a release with a specific version number, use:
 *   gradle build -PnextVersion=1.2.3
 *
 * To upload a new release to Nexus:
 *   gradle clean uploadArchives -PcoreRelease
 *
 * Requirement environment variables:
 *   - OSSRHUSERNAME - Nexus username
 *   - OSSRHPASSWORD - Nexus password
 */

plugins {
    id "com.gradle.plugin-publish" version "0.15.0"
    id "java-gradle-plugin"

    // Building
    id 'java'
    id 'groovy'
    id 'maven-publish'

    // Signing
    id 'signing'

    // Deploying
    id 'io.codearte.nexus-staging' version '0.22.0'
}

repositories {
    mavenCentral()
    mavenLocal()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

//signing {
//    def signingKey = findProperty("signingKey")
//    def signingPassword = findProperty("signingPassword")
//    useInMemoryPgpKeys(signingKey, signingPassword)
//    sign configurations.archives
//}
signing {
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign configurations.archives
}

ext {
    projectDescription = 'Serenity Gradle Plugin'

    if (!project.hasProperty("nextVersion")) {
        if (project.hasProperty("coreRelease")) {
            ext.nextVersion = "${serenityCoreVersion}"
        } else {
            ext.nextVersion = "${serenityCoreVersion}-SNAPSHOT"
        }
    }
}

group = 'net.serenity-bdd'
archivesBaseName = "serenity-gradle-plugin"
version = nextVersion
println "BUILDING VERSION ${nextVersion}"


task createNewVersionTag(type: Exec) {
    executable "sh"
    args "-c", "git tag -f -a v$nextVersion -m'release tag'"
}

task pushVersionTag(type: Exec, dependsOn: 'createNewVersionTag') {
    executable "sh"
    args "-c", "git push -f origin v$nextVersion"
}

task tagNewVersion() {
    dependsOn pushVersionTag
}

wrapper {
    gradleVersion = '7.0.2'
}

test {
    include '**/When*'
    include '**/Cucumber*'
    include '**/ScenarioLineCount*'
    exclude '**/*$*'
    exclude '**/integration/**'
    exclude '**/samples/**'
    exclude '**/*Sample*'
    maxParallelForks = Runtime.runtime.availableProcessors() * 4
}


configurations.all {
    resolutionStrategy {
        // fail fast on dependency convergence problems
        //failOnVersionConflict()
        force "commons-collections:commons-collections:${commonsCollectionsVersion}",
                "xml-apis:xml-apis:${xmlApiVersion}",
                "commons-codec:commons-codec:${commonsCodecVersion}",
                "com.google.code.gson:gson:${gsonVersion}"
    }
}

dependencies {
    implementation("net.serenity-bdd:serenity-core:${serenityCoreVersion}")
    implementation("net.serenity-bdd:serenity-model:${serenityCoreVersion}")
    implementation("net.serenity-bdd:serenity-junit:${serenityCoreVersion}")
}

jar {
    manifest {
        attributes("Implementation-Title": "Serenity Gradle Plugin",
                   "Implementation-Version": project.version.toString())
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc.options.addStringOption('Xdoclint:none', '-quiet')

artifacts {
    archives sourcesJar, javadocJar
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:-options"
}


gradlePlugin {
    plugins {
        serenityPlugin {
            id = 'net.serenity-bdd.serenity-gradle-plugin'
            implementationClass = 'net.serenitybdd.plugins.gradle.SerenityPlugin'
        }
    }
}

pluginBundle {
    website = 'https://www.serenity-bdd.info/'
    vcsUrl = 'https://github.com/serenity-bdd/serenity-gradle-plugin'
    description = 'Serenity Gradle Plugin'
    tags = ['serenity-bdd', 'test-automation']

    plugins {
        serenityPlugin {
            // id is captured from java-gradle-plugin configuration
            displayName = 'Gradle Serenity BDD plugin'
        }
    }
}