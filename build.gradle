//import net.serenitybdd.builds.ProjectVersionCounter
/**
 * To build a release version with the same version number as the serenity core dependency:
 *   gradle build -PcoreRelease
 * To build a release with a specific version number, use:
 *   gradle build -PnextVersion=1.2.3
 *
 * To upload a new release to Nexus:
 *   gradle clean uploadArchives -PcoreRelease
 *
 * Requirement environment variables:
 *   - OSSRHUSERNAME - Nexus username
 *   - OSSRHPASSWORD - Nexus password
 */

plugins {
    id 'com.gradle.plugin-publish' version '1.2.1'
    id 'java-gradle-plugin'

    // Building
    id 'java'
    id 'groovy'
    id 'maven-publish'

    // Signing
    id 'signing'

    // Deploying
    id 'io.codearte.nexus-staging' version '0.30.0'
}

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/groups/public"
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
}

//signing {
//    def signingKey = findProperty("signingKey")
//    def signingPassword = findProperty("signingPassword")
//    useInMemoryPgpKeys(signingKey, signingPassword)
//    sign configurations.archives
//}
signing {
    def signingKeyId = findProperty("signingKeyId") as String
    def signingKey = findProperty("signingKey") as String
    def signingPassword = findProperty("signingPassword") as String
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign configurations.archives
}

ext {
    projectDescription = 'Serenity Gradle Plugin'

    if (!project.hasProperty("nextVersion")) {
        if (project.hasProperty("coreRelease")) {
            ext.nextVersion = "${serenityCoreVersion}"
        } else {
            ext.nextVersion = "${serenityCoreVersion}-SNAPSHOT"
        }
    }
}

group = 'net.serenity-bdd'
archivesBaseName = "serenity-gradle-plugin"
version = nextVersion
println "BUILDING VERSION ${nextVersion}"


tasks.register('createNewVersionTag', Exec) {
    executable "sh"
    args "-c", "git tag -f -a v$nextVersion -m'release tag'"
}

tasks.register('pushVersionTag', Exec) {
    dependsOn 'createNewVersionTag'
    executable "sh"
    args "-c", "git push -f origin v$nextVersion"
}

tasks.register('tagNewVersion') {
    dependsOn pushVersionTag
}

wrapper {
    gradleVersion = '8.7'
    distributionType = 'ALL'
}

test {
    maxParallelForks = Runtime.runtime.availableProcessors() * 4
    useJUnitPlatform()
}


configurations.configureEach {
    resolutionStrategy {
        // fail fast on dependency convergence problems
        // failOnVersionConflict()
        force "commons-collections:commons-collections:${commonsCollectionsVersion}",
                "xml-apis:xml-apis:${xmlApiVersion}",
                "commons-codec:commons-codec:${commonsCodecVersion}",
                "com.google.code.gson:gson:${gsonVersion}"
    }
}

dependencies {
    implementation("net.serenity-bdd:serenity-core:${serenityCoreVersion}")
    implementation("net.serenity-bdd:serenity-model:${serenityCoreVersion}")
    implementation("net.serenity-bdd:serenity-junit:${serenityCoreVersion}")

    testImplementation("org.junit.jupiter:junit-jupiter-api:5.9.2")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.9.2")
    testImplementation("org.assertj:assertj-core:3.25.3")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.9.2")
}

jar {
    manifest {
        attributes("Implementation-Title": "Serenity Gradle Plugin",
                "Implementation-Version": project.version.toString())
    }
}
//
//task sourcesJar(type: Jar, dependsOn: classes) {
////    classifier = 'sources'
//    from sourceSets.main.allSource
//}
//
//task javadocJar(type: Jar, dependsOn: javadoc) {
////    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

(javadoc.options as CoreJavadocOptions).addStringOption('Xdoclint:none', '-quiet')

//artifacts {
//    archives sourcesJar, javadocJar
//}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << "-Xlint:-options"
}

//mavenPublish {
//    useMavenPublish = true
//}

// Build, sign, and upload
//uploadArchives {
//    repositories {
//        mavenDeployer {
//            // Sign POM
//            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
//
//            // Destination
//            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
//                authentication(userName: System.getenv("OSSRHUSERNAME"), password: System.getenv("OSSRHPASSWORD"))
//            }
//            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
//                authentication(userName: System.getenv("OSSRHUSERNAME"), password: System.getenv("OSSRHPASSWORD"))
//            }
//
//            // Add required metadata to POM
//            pom.project {
//                name 'Serenity BDD Cucumber 6 Integration'
//                packaging 'jar'
//                description 'Run Serenity tests and generate Serenity reports using Cucumber 6'
//                url 'https://github.com/serenity-bdd/serenity-cucumber6'
//
//                scm {
//                    connection 'scm:git:git://github.com/serenity-bdd/serenity-cucumber6.git'
//                    developerConnection 'scm:git:ssh://github.com/serenity-bdd/serenity-cucumber6'
//                    url 'https://github.com/serenity-bdd/serenity-cucumber6/tree/master'
//                }
//
//                licenses {
//                    license {
//                        name 'The Apache License, Version 2.0'
//                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                    }
//                }
//
//                developers {
//                    developer {
//                        id 'johnsmart'
//                        name 'John Ferguson Smart'
//                        email 'john.smart@wakaleo.com'
//                    }
//                    developer {
//                        id "cliviu"
//                        name "Liviu Carausu"
//                        email 'liviu.carausu@gmail.com'
//                    }
//                }
//            }
//        }
//    }
//}

//nexusStaging {
//    packageGroup = "net.serenity-bdd"
//    stagingProfileId = "88ab355676248c"
//}

//task copyDeps(type: Copy) {
//    from configurations.runtime + configurations.testCompile
//    into project.projectDir.path + "/lib"
//}


gradlePlugin {
    website = 'https://www.serenity-bdd.info/'
    vcsUrl = 'https://github.com/serenity-bdd/serenity-gradle-plugin'

    plugins {
        create('serenityPlugin') {
            id = 'net.serenity-bdd.serenity-gradle-plugin'
            implementationClass = 'net.serenitybdd.plugins.gradle.SerenityPlugin'
            displayName = 'Gradle Serenity BDD plugin'
            description = 'Serenity Gradle Plugin'
            tags = ['serenity-bdd', 'test-automation']
        }
    }
}
